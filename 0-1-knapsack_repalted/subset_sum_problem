Q==> Given a set of numbers, check whether it can be partitioned into two subsets such that the sum of 
 elements in both subsets is same or not.

 Sol==> 

 #include <bits/stdc++.h>
using namespace std;
int dp[101][100001];
int sos(int *w,int W,int n){
    if(W==0) return 1;
    if(W<0 || n<0) return 0;
    if(dp[n][W]!=-1) return dp[n][W];
    if(W<w[n]) return dp[n][W]=sos(w,W,n-1);
    
    return dp[n][W]=(sos(w,W,n-1)||sos(w,W-w[n],n-1));
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int w[n];
	    int sum=0;
	    for(int i=0;i<n;i++) cin>>w[i],sum+=w[i];
	    
	    if(sum&1) cout<<"NO\n";
	    else{
	        
	        int W=sum/2;
	        memset(dp,-1,sizeof(dp));
	      
	        if(sos(w,W,n-1)){
	            cout<<"YES\n";
	        }else cout<<"NO\n";
	        
	        }
	    }
	return 0;
}