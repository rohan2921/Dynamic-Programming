Q==> Given an array arr[] which represents the chain of matrices
such that the ith matrix Ai is of dimension arr[i-1] x arr[i].
Your task is to write a function that should print the minimum
number of multiplications needed to multiply the chain.

Sol==> 
Tabulation => (Top Down)

#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int arr[n+1];
	    int dp[n+1][n+1];
	    int j,temp;
	    for(int i=0;i<n;i++) cin>>arr[i];
	    for(int i=0;i<=n;i++) dp[i][i]=0;
	    for(int len=2;len<n;len++){
	        for(int i=1;i<n-len+1;i++){
	            j=i+len-1;
	            dp[i][j]=INT_MAX-1;
	            for(int k=i;k<j;k++){
	                temp=dp[i][k]+dp[k+1][j]+arr[i-1]*arr[k]*arr[j];
	                if(dp[i][j]>temp) dp[i][j]=temp;
	            }
	        }
	    }
	    cout<<dp[1][n-1]<<"\n";
	}
	return 0;
}



Recursive = > (Bottom up)

#include <bits/stdc++.h>
using namespace std;
int dp[101][101];
int mCM(int *arr,int i,int j){
    if(i>=j) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    int mn=INT_MAX-1;
    for(int k=i;k<j;k++){
        int ans=mCM(arr,i,k)+mCM(arr,k+1,j)+arr[i-1]*arr[k]*arr[j];
        mn=min(mn,ans);
    }
    return dp[i][j]=mn;
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int arr[n+1];
	    memset(dp,-1,sizeof(dp));
	    for(int i=0;i<n;i++) cin>>arr[i];
	    cout<<mCM(arr,1,n-1)<<"\n";
	}
	return 0;
}