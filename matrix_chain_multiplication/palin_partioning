Q==> Given a string A, partition A such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of A.

Input Format:

The first and the only argument contains the string A.
Output Format:

Return an integer, representing the answer as described in the problem statement.

Practice : https://www.interviewbit.com/problems/palindrome-partitioning-ii/

Sol ==>

#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
int dp[1001][1001];
bool isPalin(string s) {
	int l = s.size();
	string s2 = s;
	reverse(s2.begin(), s2.end());
	for (int i = 0; i < l; i++) {

		if (s[i] != s2[i]) return false;

	}
	return true;
}
int mCM(string arr, int i, int j,int dp[502][502]) {
	if (i >= j) return 0;
	if (dp[i][j] != -1) return dp[i][j];
	if (isPalin(arr.substr(i, j - i + 1))) return 0;

	int mn = INT_MAX - 1;
	int left,right;
	for (int k = i; k < j; k++) {
	    if(dp[i][k]!=-1) left=dp[i][k];
        else left=mCM(arr,i,k,dp),dp[i][k]=left;
        if(dp[k+1][j]!=-1) right=dp[k+1][j];
        else right=mCM(arr,k+1,j,dp),dp[k+1][j]=right;
		int ans = left+right + 1;
		mn = min(mn, ans);
	}
	return dp[i][j] = mn;
}
int main() {
#ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output1.txt", "w", stdout);

#endif


	int t;
	cin >> t;
	while (t--) {
		string s;
		cin >> s;
		memset(dp, -1, sizeof(dp));
		cout << mCM(s, 0, s.size() - 1) << "\n";
	}


	return 0;
}
