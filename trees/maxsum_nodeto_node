Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes
from some starting node to any node in the tree along the parent-child connections.
The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6

Practice : https://leetcode.com/problems/binary-tree-maximum-path-sum/ 

Sol ==>

 int sumMax(TreeNode* r,int *sum){
        int ls=0,rs=0;
        if(r==0) {
            *sum=0;
            return -999999;
        }
        int lds=sumMax(r->left,&ls);
        int rds=sumMax(r->right,&rs);
        
        *sum=max(0,r->val+max(ls,rs));
        return max(ls+rs+r->val,max(lds,rds));
    }